#include <iostream>
#include <string.h> 
#include <string>
#include <math.h>
#define _MAX_LEN_  pow(10,8)
using namespace std;
/*==========Convert from base 10 to another base=========*/
char epKieuReverse(int num)
{
	if (num >= 0 && num <= 9)
		return (char)(num + '0');
	else
		return (char)(num - 10 + 'A');
}

// reverse a string
void reverse(char* str)
{
	int len = strlen(str);
	int i;
	for (i = 0; i < len / 2; i++)
	{
		char temp = str[i];
		str[i] = str[len - i - 1];
		str[len - i - 1] = temp;
	}
}
 
char* fromDeci(char *stringAfter, int base, int inputNum)
{
	int index = 0;

	// Convert input number is given base by repeatedly 
	// dividing it by base and taking remainder 
	//if (base == 10) {
	//	//convert tu 1 so sang 1 string
	//	cout << "ahhuu";
	//}
	//else {
		while (inputNum > 0)
		{
			stringAfter[index++] = epKieuReverse(inputNum % base);
			inputNum /= base;
		}
		stringAfter[index] = '\0';

		// dao nguoc lai chuoi
		reverse(stringAfter);

		return stringAfter;
	//}
}
/*================Convert from another to base 10===========*/
int epKieuVal(char c)
{
	if (c >= '0' && c <= '9')
		return (int)c - '0';
	else
		return (int)c - 'A' + 10;
}
bool checkPoint(char* str)
{
	for (int i = 0; i < strlen(str); i++) {
		if (str[i] == '.') {
			return true;
		}
	}
	return false;
}
double toDeci(char* str, int base)
{
	int len = strlen(str);
	int power = 1.0; // Initialize power of base 
	int num = 0.0;  // Initialize stringAfterult 
	int i;
	int power1 = 1.0;
	int num1 = 0.0;
	// Decimal equivalent is str[len-1]*1 + 
	// str[len-1]*base + str[len-1]*(base^2) + ... 
	//if (checkPoint(str)) {

	//	std::string str(str); //ham bien doi char* thanh string
	//	int len = str.find(".");
	//	int len2 = str.substr(str.find(".") + 1).size();
	//	string tmp = str.substr(str.find(".") + 1);
	//	for (int i = len - 1; i >= 0; i--) {
	//		if (val(str[i]) >= base) {
	//			cout << "Invalid Number" << endl;
	//			return -1;
	//		}
	//		num += val(str[i]) * power;
	//		power = power * base;
	//	}

	//	for (int k = 0; k < len2; k++) {
	//		num1 = num1 + val(tmp[k]) * pow(base, (k + 1) * (-1));
	//	}
	//	double sum = num + num1;
	//	return sum;
	//}
	//else {
		for (i = len - 1; i >= 0; i--)
		{
			// A digit in input number must be 
			// less than number's base 
			if (epKieuVal(str[i]) >= base)
			{
				cout << "Khong hop le." << endl;
				return -1;
			}

			num += epKieuVal(str[i]) * power;
			power = power * base;
		}

		return num;
}


char* nBaseToMBase(char* str, int base1, int base2) {
	double num1 = toDeci(str, base1);
	return fromDeci(str, base2, num1);
}
int main()
{
	char* str;
	str = new char[_MAX_LEN_];
	cout << "Input number: ";
	cin.getline(str, 100);
	int base1, base2;
	cout << "Input the current base: ";
	cin >> base1;
	cout << "Input the base to convert: ";
	cin >> base2;
	if (!checkPoint(str)) {
		cout << "The equivalent of the integer in base " << base1 << " to base " << base2 << " is " << nBaseToMBase(str, base1, base2) << endl;
	}
	/*else {
		cout << "The equivalent of the real in base " << base1 << " to base " << base2 << " is " << nBaseToMBase(str, base1, base2) << endl;
	}*/
	system("pause");
	return 0;
}
